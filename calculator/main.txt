package com.example.myapplication;

import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;  //引用按钮组件
import android.widget.EditText;  //引用文本编辑框组件
import android.text.TextUtils;  //TextUtils类用于处理字符串
import android.widget.Toast;

import java.util.LinkedList;
import java.util.Stack;

//定义实现监听接口的类MainActivity
public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    //声明22个按钮和一个文本编辑框
    Button bt_num0,bt_num1,bt_num2,bt_num3,bt_num4,bt_num5,bt_num6,bt_num7, bt_num8,bt_num9,
            bt_delete,bt_div,bt_mult,bt_minus,bt_plus,bt_equal,bt_dot,bt_clear,bt_sgn,bt_sqf,bt_left,bt_right;
    private EditText et_calc;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);  //显示activity_main.xml定义的用户界面
    }

    LinkedList<String> infix = new LinkedList<>();  //中缀表达式
    LinkedList<String> postfix= new LinkedList<>();  //后缀表达式
    private int left=0;
    private boolean lastIsOperator=true;  //记录当前是否进行计算操作
    private String lastOperators = "";  //记录上一次的操作符

    //onClick()方法，触发OnClickListener接口
    public void onClick(View v) {
        et_calc= (EditText) findViewById(R.id.et_calc);  //根据ID找到对象，并进行接下来的操作
        String currentText = et_calc.getText().toString();  //当前文本框的字符串
        String sss="";
        int index;       //最后一个运算符的位置
        //分别获取按钮的内容至文本编辑框
        switch (v.getId()) {
            case R.id.bt_num0:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "0");
                lastIsOperator = false;
                break;
            case R.id.bt_num1:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "1");
                lastIsOperator = false;
                break;
            case R.id.bt_num2:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "2");
                lastIsOperator = false;
                break;
            case R.id.bt_num3:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "3");
                lastIsOperator = false;
                break;
            case R.id.bt_num4:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "4");
                lastIsOperator = false;
                break;
            case R.id.bt_num5:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "5");
                lastIsOperator = false;
                break;
            case R.id.bt_num6:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "6");
                lastIsOperator = false;
                break;
            case R.id.bt_num7:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "7");
                lastIsOperator = false;
                break;
            case R.id.bt_num8:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "8");
                lastIsOperator = false;
                break;
            case R.id.bt_num9:
                if (lastOperators.equals(")")) { return; }
                et_calc.setText(et_calc.getText() + "9");
                lastIsOperator = false;
                break;
            case R.id.bt_dot:
                if (lastOperators.equals(")")||currentText.equals("")) { return; }
                boolean dot = false;
                String s1;
                if (!lastOperators.equals("")) {  //如果上一次运算符不为空
                    index = currentText.lastIndexOf(lastOperators);  //得到上一次运算符在字符串中的位置
                    s1 = currentText.substring(index + 1);      //然后截取上一运算符之后的字符串
                } else {
                    s1 = currentText;
                }
                for (int i = 0; i < s1.length(); i++) { //遍历字符串看看有没有小数点
                    if (s1.charAt(i) == '.') {
                        dot = true;
                    }
                }
                if (dot) {  //有小数点就不能在加小数点了
                    return;
                } else {
                    if (lastIsOperator) { //运算符后面不能小数点
                        return;
                    }
                    et_calc.setText(et_calc.getText() + ".");
                }
                break;
            //归零按钮，将当前操作数直接清零
            case R.id.bt_clear:
                et_calc.setText("");
                lastIsOperator=true;
                lastOperators="";
                left=0;
                infix.clear();
                postfix.clear();
                break;
            //清除按钮，若当前文本编辑框内容为空，点击一次则删除一个字符串
            case R.id.bt_delete:
                if (TextUtils.isEmpty(et_calc.getText())) {
                    return;
                }
                char ch=currentText.charAt(currentText.length()-1);
                String s="+-*/√)";
                for(int i=0;i<5;i++){
                    if(s.charAt(i)==ch){
                        infix.removeLast();
                        infix.removeLast();
                        break;
                    }
                }
                lastOperators=infix.getLast();
                et_calc.setText(currentText.substring(0, currentText.length() - 1).length() > 0 ? currentText.substring(0, currentText.length() - 1) : "0");
                break;
            //计算按钮，若当前内容非空、或者以及上一次有操作记录且记录不是”=”的情况下，将当前的操作记录设置为+/-、√、+、-、*、/、=
            case R.id.bt_sgn:
                if (TextUtils.isEmpty(et_calc.getText())||lastIsOperator||lastOperators.equals(")")) {  //文本框为空则返回
                    return;
                }
                double a;   //记录要改变正负的数
                if(!lastOperators.equals("")){  //如果上一次运算符不为空
                    index = currentText.lastIndexOf(lastOperators);  //得到上一次运算符在字符串中的位置
                    String ss = currentText.substring(index+1);      //然后截取上一运算符之后的字符串
                    a= Double.parseDouble(ss);          //得到要改变正负的数
                    sss=currentText.substring(0,index+1);//记录最后一次操作及之前的子串
                }else{
                    a=Double.parseDouble(currentText);  //如果上一次运算符为空则文本框中的数就是要改变正负的数
                }
                 //改变数的正负并显示
                a=a-2*a;
                et_calc.setText(sss+a);
                lastIsOperator=false;
                break;
            case R.id.bt_left:
                if (!lastIsOperator) {   //上一次输入的不是数才能输左括号
                    return;
                }
                lastIsOperator=true;
                et_calc.setText(et_calc.getText()+"(");
                infix.add("(");
                left++;
                lastOperators="(";
                break;
            case R.id.bt_right:
                if ((TextUtils.isEmpty(et_calc.getText()) || lastIsOperator||left==0)) {  //有左括号才能输入右括号
                    return;
                }
                left--;
                index = currentText.lastIndexOf(lastOperators);
                sss = currentText.substring(index+1);
                infix.add(sss);
                et_calc.setText(et_calc.getText()+")");
                infix.add(")");
                lastOperators=")";
                lastIsOperator=false;
                break;
            case R.id.bt_sqf:
                if (!lastIsOperator) {   //上一次输入的不是数才能输根号
                    return;
                }
                lastIsOperator=true;
                et_calc.setText(et_calc.getText()+"√");
                infix.add("√");
                lastOperators="√";
                break;
            case R.id.bt_div:
                if ((TextUtils.isEmpty(et_calc.getText()) || lastIsOperator)) {  //文本框非空且上一次输入的不是运算符
                    return;
                }
                if(lastOperators.equals("")){
                    infix.add(currentText);
                }else if(!lastOperators.equals(")")){
                    index = currentText.lastIndexOf(lastOperators);
                    sss = currentText.substring(index+1);
                    infix.add(sss);
                }
                lastIsOperator=true;
                et_calc.setText(et_calc.getText() + "/");
                infix.add("/");
                lastOperators="/";
                break;
            case R.id.bt_mult:
                if ((TextUtils.isEmpty(et_calc.getText()) || lastIsOperator)) {
                    return;
                }
                if(lastOperators.equals("")){
                    infix.add(currentText);
                }else if(!lastOperators.equals(")")){
                    index = currentText.lastIndexOf(lastOperators);
                    sss = currentText.substring(index+1);
                    infix.add(sss);
                }
                lastIsOperator=true;
                et_calc.setText(et_calc.getText() + "*");
                infix.add("*");
                lastOperators="*";
                break;
            case R.id.bt_minus:
                if ((TextUtils.isEmpty(et_calc.getText()) || lastIsOperator)) {
                    return;
                }
                if(lastOperators.equals("")){
                    infix.add(currentText);
                }else if(!lastOperators.equals(")")){
                    index = currentText.lastIndexOf(lastOperators);
                    sss = currentText.substring(index+1);
                    infix.add(sss);
                }
                lastIsOperator=true;
                et_calc.setText(et_calc.getText() + "-");
                infix.add("-");
                lastOperators="-";
                break;
            case R.id.bt_plus:
                if ((TextUtils.isEmpty(et_calc.getText()) || lastIsOperator)) {
                    return;
                }
                if(lastOperators.equals("")){
                    infix.add(currentText);
                }else if(!lastOperators.equals(")")){
                    index = currentText.lastIndexOf(lastOperators);
                    sss = currentText.substring(index+1);
                    infix.add(sss);
                }
                lastIsOperator=true;
                et_calc.setText(et_calc.getText() + "+");
                infix.add("+");
                lastOperators="+";
                break;
            case R.id.bt_equal:
                if ((TextUtils.isEmpty(et_calc.getText()) || lastIsOperator||left!=0)) {
                    return;
                }
                if(lastOperators.equals("")){
                    et_calc.setText(et_calc.getText());
                    return;
                }
                if(!lastOperators.equals(")")){
                index = currentText.lastIndexOf(lastOperators);
                sss = currentText.substring(index+1);
                infix.add(sss);
                }
                toPostfix();
                double b=toValue();
                et_calc.setText(String.valueOf(b));
                lastOperators="";
                lastIsOperator=false;
                infix.clear();
                break;
        }
    }
    //比较运算符的优先级
    public int compare(String oper1, String oper2) {
        int i = 0,j = 0;
        switch(oper1){
            case "+":  //加的优先级是4
                i=4;
                break;
            case "-":   //减也是4
                i=4;
                break;
            case "*":  //乘是3
                i=3;
                break;
            case "/":  //除也是3
                i=3;
                break;
            case "√":  //除也是3
                i=2;
                break;
        }
        switch(oper2){
            case "+":
                j=4;
                break;
            case "-":
                j=4;
                break;
            case "*":
                j=3;
                break;
            case "/":
                j=3;
                break;
            case "√":  //除也是3
                j=2;
                break;
        }
        return i-j;  //优先级高的先运算   优先级1最高

    }
    //根据运算符计算
    public double operate(double x,double y,String oper){ //选择运算符，计算x,y
        double value=0;
        switch(oper){
            case "+":
                value=x+y;
                break;
            case "-":
                value=x-y;
                break;
            case "*":
                value=x*y;
                break;
            case "/":
                if(y<=0){
                    Toast.makeText(getApplicationContext(), "错误，除数不能为0", Toast.LENGTH_LONG).show();
                }
                value=x/y;
                break;
        }
        return value;  //返回运算结果
    }
    public double operate1(double x,String oper){ //计算开平方根
        double value=0;
        if(x<0){
            Toast.makeText(getApplicationContext(), "错误，负数不能开平方根", Toast.LENGTH_LONG).show();
        }
        value=Math.sqrt(x);
        return value;  //返回运算结果
    }
    //判断是不是数
    public boolean isNumber(String str){
        for (int i=0;i<str.length();i++){
            if (Character.isDigit(str.charAt(i))){//用java自带的函数
                return true;
            }
        }
        return false;
    }
	//中缀表达式转后缀表达式
    private void toPostfix(){  //中缀表达式转后缀表达式
        Stack<String> st=new Stack<String>();  //创建一个栈用来存运算符
        int i=0;
        while(i<infix.size()){
            String ch=infix.get(i);  //得到中缀表达式中的字符串
            if(isNumber(ch)){    //如果是数字
                postfix.add(ch);  //就加到后缀表达式中
                i++;
            }else{   //如果不是数字
                switch(ch){  //判断是哪个运算符
                    case "":  //如果是空格就跳过
                        i++;
                        break;
                    case "(":  //左括号就入栈
                        st.push(ch+"");
                        i++;
                        break;
                    case ")":   //右括号就让栈中的运算符出栈直到左括号
                        String out="";
                        while((out=st.pop())!=null && !out.equals("(")){
                            postfix.add(out);
                        }
                        i++;
                        break;
                    default:  //当栈不为空，比较要入栈的运算符的优先级和栈顶元素的优先级，如果栈顶元素的优先级高或相同，则出栈
                        //把栈顶元素加到后缀表达式中
                        while(!st.isEmpty() && !st.peek().equals("(") && compare(ch+"", st.peek())>0){
                            postfix.add(st.pop());
                        }
                        st.push(ch+"");//如果栈顶元素优先级低，则入栈
                        i++;
                }
            }
        }
        while(!st.isEmpty()){  //如果走完了栈没空
            String s2=st.pop();
            postfix.add(s2);  //则全部出栈
        }
    }
    //后缀表达式求值
    public double toValue(){  //后缀表达式求值
        Stack<Double> st = new Stack<Double>(); //用栈存数
        double value=0;
        System.out.println(postfix.toString());
        for(int i=0;i<postfix.size();i++){
            String ch=postfix.get(i);  //遍历后缀表达式
            if(isNumber(ch)){   //如果是数字
                st.push(Double.parseDouble(ch));   //加入到数字栈中
            }else{
                if(ch!=""){  //跳过空格，如果不是数字，那就是运算符了
                    if(ch.equals("√")){
                        double x=st.pop();
                        value=operate1(x,ch+"");//计算运算结果
                        System.out.println((ch+"")+x+"="+value+",");//显示运算过程
                    }else{
                        double y=st.pop();  //得到栈顶的两个数字
                        double x=st.pop();
                        value=operate(x, y, ch+"");//计算运算结果
                        System.out.println(x+(ch+"")+y+"="+value+",");//显示运算过程
                    }
                    st.push(value);
                }
            }
        }
        return st.pop();  //返回运算结果
    }
}